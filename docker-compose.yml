---
services:
  app:
    container_name: app
    build:
      context: .
    volumes:
      - ./webapp:/app/webapp
      - ./certs/:/certs/
      - shared_volume:/data
    ports:
      - "5000:5000"
    environment:
      BF_USER: ${BF_USER}
      BF_PWD: ${BF_PWD}
      BF_API_KEY: ${BF_API_KEY}
    command: sh -c "cd webapp && gunicorn -w 4 -b 0.0.0.0:5000 app:app"
    depends_on:
      - redis
      - streaming_service
    networks:
      - app-network
  
  streaming_service:
    build:
      context: .
    volumes:
      - ./streaming:/app/streaming
      - ./certs/:/certs/
      - shared_volume:/data
    environment:
      BF_USER: ${BF_USER}
      BF_PWD: ${BF_PWD}
      BF_API_KEY: ${BF_API_KEY}
    networks:
      - app-network
    depends_on:
      - redis
    command: python streaming/stream_price.py

  streaming_service_orders:
    build:
      context: .
    volumes:
      - ./streaming:/app/streaming
      - ./certs/:/certs/
      - shared_volume:/data
    environment:
      BF_USER: ${BF_USER}
      BF_PWD: ${BF_PWD}
      BF_API_KEY: ${BF_API_KEY}
    networks:
      - app-network
    depends_on:
      - app
    command: python streaming/stream_orders.py

  redis:
    image: redis:latest
    networks:
      - app-network

  nginx:
    image: nginx:latest
    container_name: nginx_proxy
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf/:/etc/nginx/conf.d/:ro
      - ./certbot/www:/var/www/certbot/:ro
      # - ./certbot/conf:/etc/letsencrypt
    depends_on:
      - app
    networks:
      - app-network

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - ./certbot/www/:/var/www/certbot/:rw
      # - ./certbot/conf:/etc/letsencrypt
    networks:
      - app-network
    # entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew --webroot -w /var/www/certbot; sleep 12h & wait $${!}; done;'"


networks:
  app-network:
    driver: bridge

volumes:
  shared_volume:
