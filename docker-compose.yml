---
services:
  app:
    container_name: app
    build:
      context: .
    volumes:
      - ./webapp:/app
      - ./certs:/certs
      - shared_volume:/data
    expose:
      - "5000"
    environment:
      APP_CONTEXT: ${APP_CONTEXT}
      BF_API_KEY_DEV: ${BF_API_KEY_DEV}
      BF_API_KEY_PROD: ${BF_API_KEY_PROD}
    # command: gunicorn -k gevent -w 1 -b 0.0.0.0:5000 app:app
    command: gunicorn -k gevent -b 0.0.0.0:5000 app:app
    depends_on:
      - redis
      - streaming_service
    networks:
      - app-network
  
  streaming_service:
    build:
      context: .
    volumes:
      - ./webapp:/app
      - ./certs:/certs
      - shared_volume:/data
    environment:
      APP_CONTEXT: ${APP_CONTEXT}
      BF_API_KEY_DEV: ${BF_API_KEY_DEV}
      BF_API_KEY_PROD: ${BF_API_KEY_PROD}
    networks:
      - app-network
    depends_on:
      - redis
    command: python stream_price.py

  streaming_service_orders:
    build:
      context: .
    volumes:
      - ./webapp:/app
      - ./certs:/certs
      - shared_volume:/data
    environment:
      APP_CONTEXT: ${APP_CONTEXT}
      BF_API_KEY_DEV: ${BF_API_KEY_DEV}
      BF_API_KEY_PROD: ${BF_API_KEY_PROD}
    networks:
      - app-network
    depends_on:
      - app
    command: python stream_orders.py

  redis:
    image: redis:latest
    networks:
      - app-network

  nginx:
    image: nginx:latest
    container_name: nginx_proxy
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf
      - ./certbot/www:/var/www/certbot/:ro
      - ./certbot/etc-letsencrypt:/etc/letsencrypt
    depends_on:
      - app
    networks:
      - app-network

  certbot:
    image: certbot/certbot
    volumes:
      - ./certbot/etc-letsencrypt:/etc/letsencrypt
      # - ./certbot/var-lib-letsencrypt:/var/lib/letsencrypt
      # - ./certbot/var-log-letsencrypt:/var/log/letsencrypt
      - ./certbot/www/:/var/www/certbot/
    # entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew --webroot -w /var/www/certbot; sleep 12h & wait $${!}; done;'"


networks:
  app-network:
    driver: bridge

volumes:
  shared_volume:
